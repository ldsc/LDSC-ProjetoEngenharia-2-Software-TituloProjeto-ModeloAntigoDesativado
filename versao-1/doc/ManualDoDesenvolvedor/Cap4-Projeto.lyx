#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
%\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
%\usepackage {helvet}
%\renewcommand {\familydefault}{\sfdefault}

% Para uso de listagens de código
\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\use_default_options false
\master DocumentoMestre-Trabalho-ProgramacaoPratica.lyx
\maintain_unincluded_children false
\language brazilian
\language_package auto
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement p
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Projeto 
\begin_inset CommandInset label
LatexCommand label
name "chap:Projeto-do-Sistema"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{
\backslash
thechapter - Projeto} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste capítulo do projeto de engenharia veremos questões associadas ao projeto
 do sistema, incluindo protocolos, recursos, plataformas suportadas, inplicações
 nos diagramas feitos anteriormente, diagramas de componentes e implantação.
 Na segunda parte revisamos os diagramas levando em conta as decisões do
 projeto do sistema.
\end_layout

\begin_layout Section
Projeto do sistema
\begin_inset Index idx
status open

\begin_layout Plain Layout
Projeto do sistema
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-do-sistema"

\end_inset


\end_layout

\begin_layout Standard
Depois da análise orientada a objeto desenvolve-se o projeto do sistema,
 qual envolve etapas como a definição dos protocolos, da interface API,
 o uso de recursos, a subdivisão do sistema em subsistemas, a alocação dos
 subsistemas ao hardware e a seleção das estruturas de controle, a seleção
 das plataformas do sistema, das bibliotecas externas, dos padrões de projeto,
 além da tomada de decisões conceituais e políticas que formam a infraestrutura
 do projeto.
\end_layout

\begin_layout Standard
Deve-se definir padrões de documentação, padrões para o nome das classes,
 padrões de retorno e de parâmetros em métodos, características da interface
 do usuário e características de desempenho.
 
\end_layout

\begin_layout Standard
Segundo 
\begin_inset CommandInset citation
LatexCommand cite
key "prog-UML-Rumbaugh,prog-UML-blaha"
literal "true"

\end_inset

, o projeto do sistema é a estratégia de alto nível para resolver o problema
 e elaborar uma solução.
 Você deve se preocupar com itens como: 
\end_layout

\begin_layout Enumerate
Protocolos
\begin_inset Index idx
status open

\begin_layout Plain Layout
Protocolos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Definição dos protocolos de comunicação entre os diversos elementos externos
 
\begin_inset Newline newline
\end_inset

(como dispositivos).
 Por exemplo: se o sistema envolve o uso dos nós de um cluster, devem ser
 considerados aspectos como o protocolo de comunicação entre os nós do cluster.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Definição dos protocolos de comunicação entre os diversos elementos internos
 
\begin_inset Newline newline
\end_inset

(como objetos).
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Definição da interface API de suas bibliotecas e sistemas.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Definição do formato dos arquivos gerados pelo software.
 Por exemplo: prefira formatos abertos, como arquivos txt e xml.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Recursos
\begin_inset Index idx
status open

\begin_layout Plain Layout
Recursos
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação e alocação dos recursos globais, como os recursos do sistema
 serão alocados, utilizados, compartilhados e liberados.
 Implicam modificações no diagrama de componentes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação da necessidade do uso de banco de dados.
 Implicam em modificações nos diagramas de atividades e de componentes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação da necessidade de sistemas de armazenamento de massa.
 Por exemplo: um 
\emph on
storage
\emph default
 em um sistema de cluster ou sistemas de backup.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Controle
\begin_inset Index idx
status open

\begin_layout Plain Layout
Controle
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação e seleção da implementação de controle, seqüencial ou concorrente,
 baseado em procedimentos ou eventos.
 Implicam modificações no diagrama de execução.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação das condições extremas e de prioridades.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação da necessidade de otimização.
 Por exemplo: prefira sistemas com grande capacidade de memória; prefira
 vários hds pequenos a um grande.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação e definição de 
\emph on
loops
\emph default
 de controle e das escalas de tempo.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação de concorrências – quais algoritmos podem ser implementados
 usando processamento paralelo.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Plataformas
\begin_inset Index idx
status open

\begin_layout Plain Layout
Plataformas
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Identificação das estruturas arquitetônicas comuns.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação de subsistemas relacionados à plataforma selecionada.
 Podem implicar em modificações no diagrama de pacotes e no diagrama de
 componentes.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identificação e definição das plataformas a serem suportadas: hardware,
 sistema operacional e linguagem de software.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Seleção das bibliotecas externas a serem utilizadas.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Seleção da biblioteca utilizada para montar a interface gráfica do software
 – GDI.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Seleção do ambiente de desenvolvimento para montar a interface de desenvolviment
o – IDE.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Padrões de projeto
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Normalmente os padrões de projeto são identificados e passam a fazer parte
 de uma biblioteca de padrões da empresa.
 Mas isto só ocorre após a realização de diversos projetos.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\begin_inset Note Note
status open

\begin_layout Plain Layout
se um item não for pertinente; pode ser retirado; ,mas somente na versão
 final; isto facilita o trabalho de revisão do trabalho!!
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Projeto orientado a objeto – POO
\begin_inset Index idx
status open

\begin_layout Plain Layout
POO
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Projeto orientado a objeto
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Projeto-orientado-a-objeto"

\end_inset


\end_layout

\begin_layout Standard
O projeto orientado a objeto é a etapa posterior ao projeto do sistema.
 Baseia-se na análise, mas considera as decisões do projeto do sistema.
 Acrescenta a análise desenvolvida e as características da plataforma escolhida
 (hardware, sistema operacional e linguagem de softwareção).
 Passa pelo maior detalhamento do funcionamento do software, acrescentando
 atributos e métodos que envolvem a solução de problemas específicos não
 identificados durante a análise.
\end_layout

\begin_layout Standard
Envolve a otimização da estrutura de dados e dos algoritmos, a minimização
 do tempo de execução, de memória e de custos.
 Existe um desvio de ênfase para os conceitos da plataforma selecionada.
 
\end_layout

\begin_layout Standard
Exemplo: na análise você define que existe um método para salvar um arquivo
 em disco, define um atributo nomeDoArquivo, mas não se preocupa com detalhes
 específicos da linguagem.
 Já no projeto, você inclui as bibliotecas necessárias para acesso ao disco,
 cria um objeto específico para acessar o disco, podendo, portanto, acrescentar
 novas classes àquelas desenvolvidas na análise.
 
\end_layout

\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 estrutural
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-estrutural"

\end_inset


\end_layout

\begin_layout Itemize
Adicionar nos diagramas de pacotes as bibliotecas e subsistemas selecionados
 no projeto do sistema (exemplo: a biblioteca gráfica selecionada).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Novas classes e associações oriundas das bibliotecas selecionadas e da linguagem
 escolhida devem ser acrescentadas ao modelo.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Estabelecer as dependências e restrições associadas à plataforma escolhida.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto no modelo
\begin_inset Index idx
status open

\begin_layout Plain Layout
modelo
\end_layout

\end_inset

 dinâmico
\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-no-modelo-dinamico"

\end_inset


\end_layout

\begin_layout Itemize
Revisar os diagramas de seqüência e de comunicação considerando a plataforma
 escolhida.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Verificar a necessidade de se revisar, ampliar e adicionar novos diagramas
 de máquinas de estado e de atividades.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nos atributos
\begin_inset Index idx
status open

\begin_layout Plain Layout
atributos
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Efeito-do-projeto-nos-atributos"

\end_inset


\end_layout

\begin_layout Itemize
Atributos novos podem ser adicionados a uma classe, como, por exemplo, atributos
 específicos de uma determinada linguagem de softwareção (acesso a disco,
 ponteiros, constantes e informações correlacionadas).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nos métodos
\begin_inset Index idx
status open

\begin_layout Plain Layout
métodos
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Efeitos do projeto nos métodos
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Em função da plataforma escolhida, verifique as possíveis alterações nos
 métodos.
 O projeto do sistema costuma afetar os métodos de acesso aos diversos dispositi
vos (exemplo: hd, rede).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
De maneira geral os métodos devem ser divididos em dois tipos: i) tomada
 de decisões, métodos políticos ou de controle; devem ser claros, legíveis,
 flexíveis e usam polimorfismo.
 ii) realização de processamentos, podem ser otimizados e em alguns casos
 o polimorfismo deve ser evitado.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Algoritmos complexos podem ser subdivididos.
 Verifique quais métodos podem ser otimizados.
 Pense em utilizar algoritmos prontos como os da STL (algoritmos genéricos).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Responda a pergunta: os métodos da classes estão dando resposta às responsabilid
ades da classe?
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Revise os diagramas de classes, de seqüência e de máquina de estado.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nas heranças
\begin_inset Index idx
status open

\begin_layout Plain Layout
heranças
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Efeitos do projeto nas heranças
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Heranças
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Reorganização das classes e dos métodos (criar métodos genéricos com parâmetros
 que nem sempre são necessários e englobam métodos existentes).
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Abstração do comportamento comum (duas classes podem ter uma superclasse
 em comum).
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Utilização de delegação para compartilhar a implementação (quando você cria
 uma herança irreal para reaproveitar código).
 Usar com cuidado.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Revise as heranças no diagrama de classes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nas associações
\begin_inset Index idx
status open

\begin_layout Plain Layout
Efeitos do projeto nas associações
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Associações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Deve-se definir na fase de projeto como as associações serão implementadas,
 se obedecerão um determinado padrão ou não.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Se existe uma relação de "muitos", pode-se implementar a associação com
 a utilização de um dicionário, que é um mapa das associações entre objetos.
 Assim, o objeto A acessa o dicionário fornecendo uma chave (um nome para
 o objeto que deseja acessar) e o dicionário retorna um valor (um ponteiro)
 para o objeto correto.
 
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Evite percorrer várias associações para acessar dados de classes distantes.
 Pense em adicionar associações diretas.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Subsubsection
Efeitos do projeto nas otimizações
\begin_inset Index idx
status open

\begin_layout Plain Layout
otimizações
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Faça uma análise de aspectos relativos à otimização do sistema.
 Lembrando que a otimização deve ser desenvolvida por analistas/desenvolvedores
 experientes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Identifique pontos a serem otimizados em que podem ser utilizados processos
 concorrentes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Pense em incluir bibliotecas otimizadas.
\end_layout

\begin_layout Itemize
Se o acesso a determinados objetos (atributos/métodos) requer um caminho
 longo (exemplo: A->B->C->D.atributo), pense em incluir associações extras
 (exemplo: A-D.atributo).
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Atributos auxiliares podem ser incluídos.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
A ordem de execução pode ser alterada.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Itemize
Revise as associações nos diagramas de classes.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Neste projeto blablabla
\end_layout

\end_deeper
\begin_layout Standard
Depois de revisados os diagramas da análise você pode montar dois diagramas
 relacionados à infraestrutura do sistema.
 As dependências dos arquivos e bibliotecas podem ser descritos pelo diagrama
 de componentes, e as relações e dependências entre o sistema e o hardware
 podem ser ilustradas com o diagrama de implantação.
\end_layout

\begin_layout Section
Diagrama de componentes
\begin_inset Index idx
status open

\begin_layout Plain Layout
Diagrama de componentes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-componentes"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de componentes mostra a forma como os componentes do software
 se relacionam, suas dependências.
 Inclui itens como: componentes, subsistemas, executáveis, nós, associações,
 dependências, generalizações, restrições e notas.
 Exemplos de componentes são bibliotecas estáticas, bibliotecas dinâmicas,
 dlls, componentes Java, executáveis, arquivos de disco, código-fonte.
 
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-componentes"

\end_inset

 um exemplo de diagrama de componentes.
 Observe que este inclui muitas dependências, ilustrando as relações entre
 os arquivos.
 Por exemplo: o subsistema biblioteca inclui os arquivos das classes A e
 B, e a geração dos objetos A.obj e B.obj depende dos arquivos A.h, A.cpp, B.h
 e B.cpp.
 A geração da biblioteca depende dos arquivos A.obj e B.obj.
 O subsistema biblioteca Qt, um subsistema exerno, inclui os arquivos de
 código da biblioteca Qt e a biblioteca em si.
 O subsistema banco de dados representa o banco de dados utilizado pelo
 sistema e tem uma interface de acesso que é utilizada pelo software para
 acesso aos dados armazenados no banco de dados.
 O software executável a ser gerado depende da biblioteca gerada, dos arquivos
 da biblioteca Qt, do módulo de arquivos MinhaJanela e do banco de dados.
\end_layout

\begin_layout Standard
Algumas observações úteis para o diagrama de componentes:
\end_layout

\begin_layout Itemize
De posse do diagrama de componentes, temos a lista de todos os arquivos
 necessários para compilar e rodar o software.
\end_layout

\begin_layout Itemize
Observe que um assunto/pacote pode se transformar em uma biblioteca e será
 incluído no diagrama de componentes.
\end_layout

\begin_layout Itemize
A ligação entre componentes pode incluir um estereótipo indicando o tipo
 de relacionamento ou algum protocolo utilizado.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Na versão final apagar este texto copiado do livro; e colocado aqui para
 lhe auxiliar; deixar somente o que é pertinente ao trabalho
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Neste projeto blablabla
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagens/DiagramaDeComponentes-Asuntos-Pacotes-Imago.png
	lyxscale 90
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de componentes
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-componentes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Diagrama de implantação
\begin_inset Index idx
status open

\begin_layout Plain Layout
Diagrama de implantação
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Diagrama de execução
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Diagrama-de-execução"

\end_inset


\end_layout

\begin_layout Standard
O diagrama de implantação é um diagrama de alto nível que inclui relações
 entre o sistema e o hardware e que se preocupa com os aspectos da arquitetura
 computacional escolhida.
 Seu enfoque é o hardware, a configuração dos nós em tempo de execução.
 
\end_layout

\begin_layout Standard
O diagrama de implantação deve incluir os elementos necessários para que
 o sistema seja colocado em funcionamento: computador, periféricos, processadore
s, dispositivos, nós, relacionamentos de dependência, associação, componentes,
 subsistemas, restrições e notas.
\end_layout

\begin_layout Standard
Veja na Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Diagrama-de-implantação."

\end_inset

 um exemplo de diagrama de implantação de um cluster.
 Observe a presença de um servidor conectado a um switch.
 Os nós do cluster (ou clientes) também estão conectados ao switch.
 Os resultados das simulações são armazenados em um servidor de arquivos
 (
\emph on
storage
\emph default
).
\end_layout

\begin_layout Standard
Pode-se utilizar uma anotação de localização para identificar onde determinado
 componente está residente, por exemplo {localização: sala 3}.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagens/DiagramDeExecucao.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de implantação
\begin_inset CommandInset label
LatexCommand label
name "cap:Diagrama-de-implantação."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Nota: 
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Não perca de vista a visão do todo; do projeto de engenharia como um todo.
 Cada capítulo, cada seção, cada parágrafo deve se encaixar.
 Este é um diferencial fundamental do engenheiro em relação ao técnico,
 a capacidade de desenvolver projetos, de ver o todo e suas diferentes partes,
 de modelar processos/sistemas/produtos de engenharia.
\end_layout

\begin_layout Subsection
Lista de características <<features>>
\begin_inset CommandInset label
LatexCommand label
name "subsec: Lista de características <<features>>"

\end_inset


\end_layout

\begin_layout Standard
No final do ciclo de concepção e análise chegamos a uma lista de características
 <<
\emph on
features
\emph default
>> que teremos de implementar.
\end_layout

\begin_layout Standard
Após a análises desenvolvidas e considerando o requisito de que este material
 deve ter um formato didático, chegamos a seguinte lista:
\begin_inset Note Note
status open

\begin_layout Plain Layout
nota importante, o número de versões irá depender do tamanho do ciclo, ou
 seja, número de dias de cada ciclo e capacidade da equipe.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
v0.1
\end_layout

\begin_deeper
\begin_layout Itemize
Lista de classes a serem implementadas
\end_layout

\begin_layout Itemize
Testes
\end_layout

\end_deeper
\begin_layout Itemize
v0.3
\end_layout

\begin_deeper
\begin_layout Itemize
Lista de classes a serem implementadas
\end_layout

\begin_layout Itemize
Testes
\end_layout

\end_deeper
\begin_layout Itemize
v0.7
\end_layout

\begin_deeper
\begin_layout Itemize
Lista de classes a serem implementadas
\end_layout

\begin_layout Itemize
Testes
\end_layout

\end_deeper
\begin_layout Subsection
Tabela classificação sistema
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tabela-classificação-sistema"

\end_inset


\end_layout

\begin_layout Standard
A Tabela a seguir é utilizada para classificação do sistema desenvolvido.
 Deve ser preenchida na etapa de projeto e revisada no final, quando o software
 for entregue na sua versão final.
\begin_inset Note Note
status open

\begin_layout Plain Layout
A tabela esta preenchida com dados de um dos exemplos de projeto; você deve
 preencher de acordo com o problema específico que esta resolvendo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="22" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="5cm">
<column alignment="center" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Licença:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] livre GPL-v3 [ ] proprietária
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Engenharia de software:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ]
\color blue
 
\color inherit
tradicional [X] ágil [ ] outras
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Paradigma de programação:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] estruturada [X] orientado a objeto - POO [ ] funcional
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Modelagem UML:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] básica 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Diagramas de caso de uso, de componentes(assuntos/pacotes/componentes),
 de classes, de sequência, de distribuição
\end_layout

\end_inset

[X] intermediária 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Diagramas de máquina de estado, de atividades
\end_layout

\end_inset

[ ] avançada
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Uso de recursos avançados de UML
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Algoritmos
\color inherit
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] alto nível 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:
\color inherit
 são algoritmos que são implementados utilizando instruções mais complexas.
\end_layout

\end_inset

[X] baixo nível
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:
\color inherit
 são algoritmos que são implementados utilizando instruções mais básicas
 e essenciais.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
implementação: [ ] recursivo ou [X] iterativo
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:
\series default
 
\color inherit
um algoritmo iterativo utiliza estruturas de repetição, fazendo com que
 determinadas atividades sejam repetidas tantas vezes quanto necessárias,
 normalmente temos algum critério de parada.
 Já um algoritmo recursivo é um algoritmo que chama a sí mesmo.
 Note que chamar a sí mesmo é uma forma de iteração.
 O exemplo do pagamento dos salários é iterativo, foi do empregado 1 ao
 empregado 10000.
\end_layout

\end_inset

; [X] determinístico 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
:
\color inherit
 é determinístico quando o caminho para solução é exato e não-determinístico
 quando usamos mecanismos de busca/estimativas para encontrar uma solução.
\end_layout

\end_inset

ou [ ] não-determinístico; [ ] exato ou [X] aproximado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\color blue
: 
\color inherit
muitas vezes tenho a equação que me dá uma solução exata, quando utilizo
 esta equação meu algoritmo é exato.
 Mas em muitas situações eu não tenho a soluição exata, tenho apenas equações
 aproximadas, quando uso uma equação inexata ou empírica, sei que meu algoritmo
 é aproximado.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
concorrências: [X] serial [X] concorrente [X] paralelo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
paradigma: [X] dividir para conquistar
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
\color blue
:
\series default
 
\color inherit
são algoritmos que trabalham com a divisão e subdivisão de um problema em
 partes menores;
\end_layout

\begin_deeper
\begin_layout Itemize
Exemplo: escrever seu TCC - Trabalho de Conclusão de Curso, você irá dividir
 o mesmo em vários capítulos, os capítulos em seções e as seções em subseções.
 De forma que então conseguirá desenvolver seu trabalho, pois as partes
 pequenas tornam-se viáveis de serem feitas.
\end_layout

\end_deeper
\end_inset

 [ ] programação linear
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:
\series default
\color inherit
 o problema é resolvido através de programação linear envolvendo a busca
 de máximos e mínimos
\end_layout

\end_inset

 [ ] transformação/ redução
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
\color blue
:
\series default
\color inherit
 são algoritmos que mudam o problema fazendo associações com outros, geralmente
 eu conheço a solução deste outro problema, resolvo o mesmo, e então retorno;
 é exatamente o que fazemos por exemplo quando usamos uma transformada matemátic
a para resolver um problema.
\end_layout

\begin_deeper
\begin_layout Itemize
Exemplo: não sei resolver estas equações professor.
 Faça uma transformada de Laplace, resolva no espaço de Laplace e então
 volte.
\end_layout

\end_deeper
\end_inset

 [ ] busca e enumeração
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:
\series default
\color inherit
 são algoritmos que usam a teoria dos grafos.
\end_layout

\end_inset

 [ ] heurístico e probabilístico
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:
\series default
\color inherit
 são algoritmos que trabalham com números aleatórios e heurísticas, aproximações
, em busca da solução.
\end_layout

\end_inset

 [ ] baseados em pilhas
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
\color blue
:
\series default
\color inherit
 são algoritmos de cálculo implementados utilizando o conceito de pilhas
 e Notação Polonesa Inversa (
\emph on
RPN - Reverse Polish Notation
\emph default
), também conhecida como notação pós-fixada.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Software:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] de base
\begin_inset Note Note
status collapsed

\begin_layout Itemize

\series bold
: 
\series default
Estão relacionados ao funcionamento do computador e seus recursos (processador,
 memória, hd, teclado, mouse, portas, etc).
 Exemplos:
\end_layout

\begin_deeper
\begin_layout Itemize
Sistemas operacionais (Windows, GNU/Linux, Mac Os X, Android).
\end_layout

\begin_layout Itemize
Suporte ao sistema operacional (
\emph on
drivers 
\emph default
de dispositivos).
\end_layout

\begin_layout Itemize
Suporte ao desenvolvimento de software (compiladores,
\emph on
 debugers
\emph default
, 
\emph on
profilers
\emph default
, ambientes de desenvolvimento).
\end_layout

\begin_layout Itemize
Suporte a manutenção do computador (utilitários).
\end_layout

\end_deeper
\end_inset

 [X] aplicados
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
: 
\series default
São os demais softwares, os que nos ajudam no dia a dia.
 Podemos dividir em softwares de cunho geral, específicos e científicos.
 Esta divisão faz sentido pois os softwares específicos exigem conhecimentos
 técnicos da área específica e os softwares científicos tem requisitos diferenci
ados no que se refere a interface, documentação, demandas de otimização,
 consumo de memória e performance.
 Exemplos:
\end_layout

\end_inset

 [ ] de cunho geral
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Editor de texto, editor de apresentações e planilha eletrônica (ex: Office,
 Libre Office).
\end_layout

\begin_deeper
\begin_layout Itemize
Aplicativos para ver filmes, ouvir músicas e jogos eletrônicos.
\end_layout

\begin_layout Itemize
Aplicações web como navegador de internet, gerenciador de email, gerenciador
 de tarefas (chrome, gmail).
\end_layout

\begin_layout Itemize
Gerenciador de arquivos na rede (ex: dropbox, google drive, github).
\end_layout

\end_deeper
\end_inset

 [X] específicos para determinada área
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Da área de medicina (interpretação de imagens e diagnósticos).
\end_layout

\begin_deeper
\begin_layout Itemize
Da área de direito (gestão de documentos e processos).
\end_layout

\begin_layout Itemize
Da área de engenharia (CAD, modeladores, simuladores específicos).
\begin_inset Note Note
status open

\begin_layout Plain Layout
Com uso de IA - Inteligência Artificial.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset

 [X] educativo [X] científico
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Modeladores e simuladores de cunho acadêmico.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
instruções: [X] alto nível [ ] baixo nível
\begin_inset Note Note
status open

\begin_layout Plain Layout
interrupções/assembler
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
otimização: [X] serial não otimizado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
\series default
 executa uma sequência de instruções de forma serial (não existe antecipação,
 nem desvios).
 Não houve preocupação com desempenho.
 Não foram aproveitadas opções de otimização do compilador e do processador
 específico.
 É a forma de programação mais usual!
\end_layout

\end_inset

 [X] serial otimizado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
: 
\series default
Neste caso houve preocupação com desempenho, com a escolha dos melhores
 algoritmos, com alocação de memória(ex: uso de ponteiros), com a forma
 como a linguagem e o sistema operacional lidam com a memória, com a chamada
 das funções.
 Foram aproveitadas opções de otimização do compilador e do processador
 específico.
 É a forma de otimização mais usual, a primeira a ser adotada.
\end_layout

\end_inset

 [X] concorrente
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
: 
\series default
Neste caso dois ou mais processos/
\emph on
threads
\emph default
 diferentes rodam ao mesmo tempo e trocam informações entre sí.
 Um exemplo típico é o caso do produtor/consumidor.
 O produtor gera dados que são processador pelo consumidor.
 Note que teremos pelo menos dois núcleos sendo utilizados, cada um fazendo
 um processamento diferente.
 Note que os softwares podem ter sido desenvolvidos em linguagens diferentes,
 a comunicação pode ser feita por exemplo via pipe (um canal de comunicação
 entre programas).
\end_layout

\end_inset

 [X] paralelo
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
\series default
 Neste caso dois ou mais processos/
\emph on
threads
\emph default
 iguais rodam em paralelo.
 Um exemplo típico em engenharia é pegar um cálculo muito longo e dividir
 o mesmo.
 Por exemplo, preciso aplicar um filtro passa baixa sobre uma imagem grande.
 Se tenho 4 núcleos a disposição divido a imagem em 4 pedaços e processo
 cada pedaço usando um dos núcleos.
 Se este processamento for independente é fácil implementar, porém, se tiver
 intersecções, então terei de usar mecanismos de comunicação entre processos/thr
eads.
\end_layout

\end_inset

 [ ] vetorial
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
:
\series default
 alguns hardwares possibilitam o uso de processamento vetorial, antigamente
 eram muito específicos e caros, mas hoje em dia várias CPUs tem capacidade
 de processamento vetorial, por exemplo com o uso de SIMD - Uma Instrução
 Múltiplos Dados.
 A ideia aqui é que o processador carrega um vetor de dados A, carrega um
 vetor de dados B, e realiza a operação de soma armazenando o resultado
 em C.
 Isto é feito simultaneamente, isto é, as operações C[0] = A[0] + B[0];
 C[1] = A[1] + B[1];...; C[n] = A[n] + B[n]; são todas feitas no mesmo instante
 (mesmo 
\emph on
clock
\emph default
).
 Alguns compiladores já permitem otimizações que viabilizam o uso deste
 tipo de processamento, notadamente nas bibliotecas padrões.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
interface do usuário: [ ] kernel numérico [ ] linha de comando [ ] modo
 texto [X] híbrida (texto e saídas gráficas) [ ] modo gráfico (ex: Qt) [
 ] navegador
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Recursos de C++:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ básico (FCC): variáveis padrões da linguagem, estruturas de controle
 e repetição, estruturas de dados, struct, classes(objetos, atributos, métodos),
 funções; entrada e saída de dados (
\emph on
streams
\emph default
), funções de cmath
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ intermediário: funções lambda.
 Ponteiros, referências, herança, herança múltipla, polimorfismo, sobrecarga
 de funções e de operadores, tipos genéricos (templates), 
\emph on
smarth pointers
\emph default
.
 Diretrizes de pré-processador, classes de armazenamento e modificadores
 de acesso.
 Estruturas de dados: enum, uniões.
 Bibliotecas: entrada e saída acesso com arquivos de disco, redirecionamento.
 Bibliotecas: 
\emph on
filesystem
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] C++ intermediário 2: A biblioteca de gabaritos de C++ (a STL), containers,
 iteradores, objetos funções e funções genéricas.
 Noções de processamento paralelo (múltiplas threads, uso de 
\emph on
thread, join 
\emph default
e 
\emph on
mutex
\emph default
).
 Bibliotecas: 
\emph on
random, threads
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] C++ avançado: Conversão de tipos do usuário, especializações de templates,
 excessões.
 Cluster de computadores, processamento paralelo e concorrente, múltiplos
 processos (pipes, memória compartilhada, sinais).
 Bibliotecas: 
\emph on
expressões regulares, múltiplos processos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Bibliotecas de C++:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] Entrada e saída de dados (
\emph on
streams
\emph default
) [X] cmath [X] 
\emph on
filesystem 
\emph default
[ ] 
\emph on
random 
\emph default
[X] 
\emph on
threads 
\emph default
[ ] 
\emph on
expressões regulares 
\emph default
[ ] 
\emph on
múltiplos processos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Bibliotecas externas:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] 
\family typewriter
CGnuplot 
\family default
[X] 
\family typewriter
QCustomPlot 
\family default
[ ] 
\family typewriter
Qt diálogos
\family default
 [ ] QT Janelas/menus/BT______
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Ferramentas auxiliares:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Montador:
\family typewriter
 
\family default
[X] make
\family typewriter
 
\family default
[] cmake
\family typewriter
 
\family default
[X] qmake
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
IDE:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[X] Editor simples: kate/gedit/emacs
\family typewriter
 
\family default
[ ] kdevelop
\family typewriter
 
\family default
[ ] QT-Creator
\family typewriter
 
\family default
[ ] ____________
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
SCV:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] cvs
\family typewriter
 
\family default
[ ] svn
\family typewriter
 
\family default
[X] git
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color blue
Disciplinas correlacionadas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[ ] estatística
\begin_inset Note Note
status collapsed

\begin_layout Itemize
[ ] Básica: média, desvio padrão, histogramas, números pseudo randômicos.
 Estatística descritiva.
 Probabilidades.
 Variáveis aleatórias Unidimensionais.
 Função de variáveis aleatórias.
 Variáveis aleatórias de duas ou mais dimensões.
 Caracterização de variáveis aleatórias.
 Variáveis aleatórias discretas e contínuas.
 Teorema central do limite.
 Amostragem
\end_layout

\begin_layout Itemize
[ ] Intermediária: Estimação.
 Teste de hipótese.
 Correlação e regressão.
 Distribuições (normal.
 T-Student, X-quadrado)
\end_layout

\end_inset

 [ ] cálculo numérico 
\begin_inset Note Note
status collapsed

\begin_layout Itemize
[ ] Básico: erros, solver de função (iteração de ponto fixo, método das
 cordas, Newton-Raphson), integral numérica(trapésio, Simpson, Gauss), interpola
ção(interpolação polinomial, Lagrange, Newton, funções 
\emph on
spline
\emph default
), ajuste de curvas(ajuste por polinômios, mínimos quadrados) .
\end_layout

\begin_deeper
\begin_layout Itemize
[ ] Intermediário: matrizes e sistemas de equações lineares(solver de sistema
 de equações - TDMA, eliminação gauss, fatoração LU), solução numérica de
 equações diferenciais(método de Euler, método de Taylor e Runge-Kutta)
\end_layout

\end_deeper
\end_inset

 [ ]
\family typewriter
 
\family default
modelamento numérico 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
[ ] Volume de controle (equações de balanço).
 [ ] Diferenças finitas.
 [ ] Elementos finitos
\end_layout

\end_inset

 [X] análise e processamento de imagens
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
